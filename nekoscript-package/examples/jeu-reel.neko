// jeu-reel.neko - Un jeu simple créé avec nekoScript
nekModule NekoJeu {
  // Importer les packages nécessaires
  nekImporter Base;
  nekImporter NekoJeu;
  
  // Configuration du jeu
  nekVariable LARGEUR = 800;
  nekVariable HAUTEUR = 600;
  nekVariable TITRE = "Neko Aventure";
  
  // Classe pour le joueur
  nekClasse Joueur {
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.largeur = 50;
      this.hauteur = 50;
      this.vitesseX = 0;
      this.vitesseY = 0;
      this.acceleration = 0.5;
      this.deceleration = 0.8;
      this.vitesseMax = 8;
      this.couleur = "#0088ff";
      this.score = 0;
      this.enSaut = false;
    }
    
    dessiner(ctx) {
      // Dessiner le joueur
      ctx.fillStyle = this.couleur;
      ctx.fillRect(this.x, this.y, this.largeur, this.hauteur);
      
      // Ajouter les yeux et les oreilles pour faire un chat
      // Oreilles
      ctx.fillStyle = "#006bcc";
      ctx.beginPath();
      ctx.moveTo(this.x + 5, this.y);
      ctx.lineTo(this.x + 15, this.y - 15);
      ctx.lineTo(this.x + 25, this.y);
      ctx.fill();
      
      ctx.beginPath();
      ctx.moveTo(this.x + 25, this.y);
      ctx.lineTo(this.x + 35, this.y - 15);
      ctx.lineTo(this.x + 45, this.y);
      ctx.fill();
      
      // Yeux
      ctx.fillStyle = "white";
      ctx.beginPath();
      ctx.arc(this.x + 15, this.y + 15, 7, 0, Math.PI * 2);
      ctx.arc(this.x + 35, this.y + 15, 7, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.fillStyle = "black";
      ctx.beginPath();
      ctx.arc(this.x + 15, this.y + 15, 3, 0, Math.PI * 2);
      ctx.arc(this.x + 35, this.y + 15, 3, 0, Math.PI * 2);
      ctx.fill();
      
      // Museau
      ctx.fillStyle = "#ffb6c1";
      ctx.beginPath();
      ctx.arc(this.x + 25, this.y + 30, 8, 0, Math.PI);
      ctx.fill();
      
      // Moustaches
      ctx.strokeStyle = "white";
      ctx.lineWidth = 2;
      
      // Gauche
      ctx.beginPath();
      ctx.moveTo(this.x + 15, this.y + 30);
      ctx.lineTo(this.x, this.y + 25);
      ctx.stroke();
      
      ctx.beginPath();
      ctx.moveTo(this.x + 15, this.y + 30);
      ctx.lineTo(this.x, this.y + 30);
      ctx.stroke();
      
      ctx.beginPath();
      ctx.moveTo(this.x + 15, this.y + 30);
      ctx.lineTo(this.x, this.y + 35);
      ctx.stroke();
      
      // Droite
      ctx.beginPath();
      ctx.moveTo(this.x + 35, this.y + 30);
      ctx.lineTo(this.x + 50, this.y + 25);
      ctx.stroke();
      
      ctx.beginPath();
      ctx.moveTo(this.x + 35, this.y + 30);
      ctx.lineTo(this.x + 50, this.y + 30);
      ctx.stroke();
      
      ctx.beginPath();
      ctx.moveTo(this.x + 35, this.y + 30);
      ctx.lineTo(this.x + 50, this.y + 35);
      ctx.stroke();
    }
    
    mettreAJour(touches, plateformes) {
      // Gérer le mouvement horizontal
      if (touches.gauche) {
        this.vitesseX -= this.acceleration;
        if (this.vitesseX < -this.vitesseMax) {
          this.vitesseX = -this.vitesseMax;
        }
      } else if (touches.droite) {
        this.vitesseX += this.acceleration;
        if (this.vitesseX > this.vitesseMax) {
          this.vitesseX = this.vitesseMax;
        }
      } else {
        // Décélération
        this.vitesseX *= this.deceleration;
        if (Math.abs(this.vitesseX) < 0.1) {
          this.vitesseX = 0;
        }
      }
      
      // Appliquer la gravité
      this.vitesseY += 0.5;
      
      // Sauter si on est sur une plateforme
      if (touches.haut && !this.enSaut) {
        this.vitesseY = -12;
        this.enSaut = true;
      }
      
      // Déplacer le joueur
      this.x += this.vitesseX;
      this.y += this.vitesseY;
      
      // Vérifier les collisions avec les bords de l'écran
      if (this.x < 0) {
        this.x = 0;
        this.vitesseX = 0;
      }
      if (this.x + this.largeur > LARGEUR) {
        this.x = LARGEUR - this.largeur;
        this.vitesseX = 0;
      }
      
      // Vérifier les collisions avec les plateformes
      this.enSaut = true;
      for (const plateforme of plateformes) {
        if (
          this.x + this.largeur > plateforme.x &&
          this.x < plateforme.x + plateforme.largeur &&
          this.y + this.hauteur >= plateforme.y &&
          this.y + this.hauteur <= plateforme.y + 10 &&
          this.vitesseY > 0
        ) {
          this.y = plateforme.y - this.hauteur;
          this.vitesseY = 0;
          this.enSaut = false;
          
          // Si c'est une plateforme bonus
          if (plateforme.type === "bonus" && !plateforme.collecte) {
            this.score += 10;
            plateforme.collecte = true;
          }
        }
      }
      
      // Si le joueur tombe en bas de l'écran
      if (this.y > HAUTEUR) {
        this.x = LARGEUR / 2 - this.largeur / 2;
        this.y = 50;
        this.vitesseY = 0;
        this.score = Math.max(0, this.score - 5);
      }
    }
  }
  
  // Classe pour les plateformes
  nekClasse Plateforme {
    constructor(x, y, largeur, type = "normal") {
      this.x = x;
      this.y = y;
      this.largeur = largeur;
      this.hauteur = 20;
      this.type = type;
      this.collecte = false;
    }
    
    dessiner(ctx) {
      if (this.type === "normal") {
        ctx.fillStyle = "#8b4513";
      } else if (this.type === "bonus" && !this.collecte) {
        ctx.fillStyle = "#ffd700";
      } else {
        ctx.fillStyle = "#8b4513";
      }
      
      ctx.fillRect(this.x, this.y, this.largeur, this.hauteur);
      
      // Ajouter un peu de détail
      ctx.fillStyle = this.type === "normal" ? "#a0522d" : "#daa520";
      ctx.fillRect(this.x, this.y, this.largeur, 5);
    }
  }
  
  // Fonction principale
  nekFonction nekPrincipal() {
    nekAfficher("Initialisation du jeu nekoScript...");
    
    // Créer le jeu
    nekVariable jeu = NekoJeu.créerJeu(TITRE, LARGEUR, HAUTEUR);
    
    // Variables du jeu
    nekVariable joueur = new Joueur(LARGEUR / 2 - 25, 50);
    nekVariable plateformes = [];
    nekVariable touches = {
      gauche: false,
      droite: false,
      haut: false
    };
    
    // Initialiser les plateformes
    nekFonction initialiserPlateformes() {
      plateformes = [];
      
      // Plateforme de départ
      plateformes.push(new Plateforme(LARGEUR / 2 - 50, 200, 100));
      
      // Ajouter des plateformes aléatoires
      for (let i = 0; i < 10; i++) {
        const x = Math.random() * (LARGEUR - 100);
        const y = 250 + i * 70;
        const largeur = 70 + Math.random() * 100;
        const type = Math.random() > 0.7 ? "bonus" : "normal";
        
        plateformes.push(new Plateforme(x, y, largeur, type));
      }
    }
    
    // Initialiser le jeu
    initialiserPlateformes();
    
    // Gestion des entrées clavier
    nekFonction gestionClavier() {
      // Gestion des touches au clavier
      jeu.surTouche("ArrowLeft", (appuye) => {
        touches.gauche = appuye;
      });
      
      jeu.surTouche("ArrowRight", (appuye) => {
        touches.droite = appuye;
      });
      
      jeu.surTouche("ArrowUp", (appuye) => {
        touches.haut = appuye;
      });
      
      jeu.surTouche(" ", (appuye) => {
        touches.haut = appuye;
      });
    }
    
    // Configurer les gestionnaires d'événements
    gestionClavier();
    
    // Fonction de mise à jour du jeu
    nekFonction miseAJour(ctx) {
      // Effacer le canvas
      ctx.clearRect(0, 0, LARGEUR, HAUTEUR);
      
      // Dessiner le fond
      ctx.fillStyle = "#87CEEB";
      ctx.fillRect(0, 0, LARGEUR, HAUTEUR);
      
      // Dessiner quelques nuages
      ctx.fillStyle = "white";
      ctx.beginPath();
      ctx.arc(100, 80, 30, 0, Math.PI * 2);
      ctx.arc(130, 70, 40, 0, Math.PI * 2);
      ctx.arc(160, 80, 30, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.beginPath();
      ctx.arc(600, 120, 25, 0, Math.PI * 2);
      ctx.arc(630, 110, 35, 0, Math.PI * 2);
      ctx.arc(660, 120, 25, 0, Math.PI * 2);
      ctx.fill();
      
      // Mettre à jour et dessiner les plateformes
      for (const plateforme of plateformes) {
        plateforme.dessiner(ctx);
      }
      
      // Mettre à jour et dessiner le joueur
      joueur.mettreAJour(touches, plateformes);
      joueur.dessiner(ctx);
      
      // Afficher le score
      ctx.fillStyle = "black";
      ctx.font = "24px Arial";
      ctx.fillText("Score: " + joueur.score, 20, 30);
      
      // Instructions
      ctx.fillStyle = "black";
      ctx.font = "16px Arial";
      ctx.fillText("Touches: ← → pour se déplacer, ↑ ou Espace pour sauter", LARGEUR / 2 - 200, 30);
    }
    
    // Démarrer le jeu avec la boucle principale
    jeu.démarrer(miseAJour);
    
    nekAfficher("Jeu nekoScript démarré!");
    nekRetourner "Jeu démarré avec succès";
  }
}